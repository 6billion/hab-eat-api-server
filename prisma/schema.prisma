// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id            Int               @unique @default(autoincrement())
  nickname      String            @default("햅잇")
  height        Int
  weight        Int
  age           Int
  sex           Sex
  type          UserType
  activityLevel UserActivityLevel @default(lightlyActive)
  hasDisease    Boolean           @default(false)
  createdAt     DateTime          @default(now())

  token   Tokens?    @relation("userToToken")
  account Accounts[] @relation("userToAccount")
}

model Accounts {
  id        String
  type      AccountType
  userId    Int         @unique
  createdAt DateTime    @default(now())

  user Users @relation("userToAccount", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([id, type])
}

model Tokens {
  userId    Int      @unique
  token     String   @unique
  updatedAt DateTime @updatedAt

  user Users @relation("userToToken", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Challenges {
  id             Int           @id @default(autoincrement())
  name           String
  description    String
  startDate      DateTime      @db.Date
  endDate        DateTime      @db.Date
  targetUserType UserType
  type           ChallengeType

  challengeParticipants      ChallengeParticipants[]     @relation("challengeToParticipant")
  nutrientChallengeConditions NutrientChallengeConditions? @relation("challengeToNutriChallengeConditoin")

  @@index([startDate, endDate])
}

model ChallengeParticipants {
  id              Int           @id @default(autoincrement())
  userId          Int
  challengeId     Int
  challengeType   ChallengeType
  goalDays        Int
  successDays     Int
  joinDate        DateTime      @db.Date
  endDate         DateTime      @db.Date
  lastSuccessDate DateTime?     @db.Date
  lastCheckDate   DateTime?     @db.Date
  status          Boolean

  challengeCertificationLogs ChallengeCertificationLogs[] @relation("challengeParticipantToLog")
  challenge                  Challenges                   @relation("challengeToParticipant", fields: [challengeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, challengeId])
  @@index([userId, endDate])
}

model ChallengeCertificationLogs {
  userId                   Int
  challengeParticipantsId Int
  date                     DateTime @db.Date

  challengesParticipants ChallengeParticipants @relation("challengeParticipantToLog", fields: [challengeParticipantsId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, challengeParticipantsId, date])
}

model NutrientChallengeConditions {
  challengeId  Int    @id
  kcal         Float?
  carbohydrate Float?
  protein      Float?
  fat          Float?
  natrium      Float?
  cholesterol  Float?
  sugar        Float?

  challenge Challenges @relation("challengeToNutriChallengeConditoin", fields: [challengeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum UserType {
  diet
  bulk
  maintain
}

enum UserActivityLevel {
  sedentary
  lightlyActive
  moderatelyActive
  veryActive
  extraActive
}

enum AccountType {
  kakao
  naver
}

enum Sex {
  male
  felmale
}

enum ChallengeType {
  bulk
  diet
  habit
  protein2x
}
